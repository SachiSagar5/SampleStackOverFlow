{"version":3,"sources":["components/UserComment.jsx"],"names":["UserCommnet","state","QuesionDetails","QuestionlistId","username","timestamp","Date","toLocaleString","comment","UserCommetList","Attachment","handleComment","e","preventDefault","_this","ValidComment","data","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","then","res","json","console","log","setState","concat","Object","C_Users_sachin_ramappa_Desktop_THBS_Predicament_Solution_test_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","Success","handleChange","C_Users_sachin_ramappa_Desktop_THBS_Predicament_Solution_test_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","name","value","toast","error","success","encodeImageFileAsURL","cb","files","reder","FileReader","readAsDataURL","onload","result","_this2","this","props","match","params","id","response","Usercomment","comments","map","temp","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","key","className","width","src","Fragment","react_toastify__WEBPACK_IMPORTED_MODULE_8__","Quesiontitle","style","fontSize","Summary","onSubmit","onChange","type","htmlFor","action","class","alt","React","Component"],"mappings":"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","file":"static/js/6.62d2b71a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\n\r\n\r\nclass UserCommnet extends React.Component{\r\n    \r\n    state={\r\n        QuesionDetails:[],\r\n        QuestionlistId: '',\r\n        username :'',\r\n        timestamp:new Date().toLocaleString(),\r\n        comment:'',\r\n        UserCommetList:[],\r\n        Attachment:''\r\n    }\r\n    componentDidMount(){\r\n        fetch(`http://localhost:3000/Questionlist/${this.props.match.params.id}/?_embed=Usercomment`)\r\n        .then(response => response.json())\r\n        .then(json => this.setState({\r\n            QuesionDetails : json,\r\n            QuestionlistId : this.props.match.params.id,\r\n            UserCommetList : json.Usercomment\r\n        }));\r\n        \r\n    }\r\n    handleComment =(e)=>{\r\n        e.preventDefault();\r\n        if(this.state.username ===\"\"|| this.state.comment === \"\"){\r\n            this.ValidComment();\r\n        }else{\r\n            \r\n          let data = {\r\n            \"QuestionlistId\": this.state.QuestionlistId,\r\n            \"username\" : this.state.username,\r\n            \"timestamp\": this.state.timestamp,\r\n            \"comment\": this.state.comment,\r\n            \"Attachment\" : this.state.Attachment\r\n          }\r\n        fetch(`http://localhost:3000/Usercomment`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data) \r\n        }).then(res=>res.json())\r\n        .then(json=>{\r\n            console.log(json)\r\n            this.setState({\r\n                UserCommetList : [...this.state.UserCommetList,json]\r\n            })\r\n            this.Success();\r\n        });\r\n     }\r\n    }\r\n    handleChange=(e)=> {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n        \r\n    }\r\n    ValidComment = () => toast.error(\"Please Enter User Name and Comment\");\r\n    Success = () => toast.success(\"Comment Posted Successfully\");\r\n\r\n\r\n    // image attachent code\r\n\r\n    encodeImageFileAsURL=(e,cb)=> {\r\n           let files = e.target.files;\r\n            let reder = new FileReader()\r\n            reder.readAsDataURL(files[0]);\r\n            reder.onload =(e)=>{\r\n               this.setState({\r\n                   Attachment : e.target.result\r\n               })\r\n            }  \r\n    }\r\n    \r\n\r\n    render(){\r\n    let style ={fontSize:18  }\r\n    let comments\r\n    if(this.state.QuesionDetails.Usercomment){\r\n        comments = this.state.UserCommetList.map((temp)=> \r\n        <div key={temp.id}className=\"card-panel yellow lighten-5 hoverable z-depth-1\">\r\n        <div className=\"row mb-0\">\r\n        <div className=\"col m2 valign-wrapper\"><i className=\"material-icons\">account_circle</i> &nbsp;{temp.username}</div>\r\n        <div className=\"col m7\">\r\n        <span className=\"black-text\">\r\n            {temp.comment}\r\n        </span>\r\n        </div>\r\n        <div className=\"col m3 valign-wrapper\">\r\n        <i className=\"material-icons\">query_builder</i> &nbsp; {temp.timestamp}\r\n        </div>\r\n        <div className=\"center\">\r\n        <img width=\"20%\"src={temp.Attachment}/>\r\n        </div>\r\n    </div>\r\n    </div> \r\n            )\r\n    }\r\n    \r\n        return(\r\n            <React.Fragment>\r\n                  <ToastContainer />\r\n                <div className=\"container\">\r\n                <blockquote> <h5>{this.state.QuesionDetails.Quesiontitle}</h5> </blockquote>\r\n                <p className=\"flow-text\" style={style}>{this.state.QuesionDetails.Summary}</p>\r\n                <hr/>\r\n                <section>\r\n                    <h5 className=\"mt-4\">User Answers</h5>\r\n                    <hr/>\r\n                    <div className=\"col s12 m12\">\r\n                     {comments}\r\n                  </div>\r\n                  <h5 className=\"mt-4\">Add Answers</h5>\r\n                    <hr/>\r\n                  <div className=\"row\">\r\n                    <form className=\"col s12\" onSubmit={this.handleComment}>\r\n                    <div className=\"row\">\r\n                    <div className=\"input-field col m4\">\r\n                            <input id=\"password\" onChange={this.handleChange} name='username' type=\"text\" className=\"validate\"/>\r\n                            <label htmlFor=\"password\">User Name</label>\r\n                            </div>\r\n                        <div className=\"input-field col m8\">\r\n                        <textarea id=\"textarea1\" onChange={this.handleChange} name='comment' className=\"materialize-textarea\"></textarea>\r\n                        <label htmlFor=\"textarea1\">Enter your Answer</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                    <div className=\"input-field col m10\">\r\n                        <form action=\"#\">\r\n                        <div class=\"file-field input-field\">\r\n                        <div class=\"btn\">\r\n                            <span>Attach File</span>\r\n                            <input type=\"file\" onChange={this.encodeImageFileAsURL}/>\r\n                        </div>\r\n                        <div class=\"file-path-wrapper\">\r\n                            <input class=\"file-path validate\" type=\"text\"/>\r\n                        </div>\r\n                        </div>\r\n                    </form>   \r\n                        </div>\r\n                        <div className=\"input-field col m2\">\r\n                        <button className=\"btn waves-effect waves-light light-green darken-4 right\"  type=\"submit\" name=\"action\">Send\r\n                                <i className=\"material-icons right\">send</i>\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                    <div className=\"input-field col m12 \">\r\n                            <img width=\"40%\"src={this.state.Attachment} className=\"card\" alt=\"\"/>\r\n                        </div>\r\n                        </div>\r\n                            \r\n                    </form>\r\n                </div>\r\n                </section>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserCommnet;"],"sourceRoot":""}